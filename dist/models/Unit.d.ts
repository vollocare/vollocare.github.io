import { IUnit } from '../interfaces/IUnit';
import { UnitState, AttackConfig, Color } from '../types/common';
import { IVector } from '../types/vector';
export declare class Unit implements IUnit {
    readonly id: string;
    position: IVector;
    velocity: IVector;
    acceleration: IVector;
    readonly r: number;
    maxSpeed: number;
    maxForce: number;
    health: number;
    maxHealth: number;
    isAlive: boolean;
    state: UnitState;
    previousState: UnitState;
    stateChangeTime: number;
    attackConfig: AttackConfig;
    lastAttackTime: number;
    canAttack: boolean;
    color: Color;
    target?: IVector;
    destination?: IVector;
    groupId?: number;
    isLeader: boolean;
    private p;
    private unitType;
    private p1p2;
    direction: IVector;
    private baseRadius;
    private life;
    private approachRange;
    private attackUnit;
    private attackVisibleDistance;
    private attackRange;
    private attackVFX;
    private healthRecoveryCooldown;
    constructor(p: p5Instance, x: number, y: number, groupId?: number);
    update(deltaTime: number): void;
    private updateByState;
    private updateMoveState;
    private updateFollowState;
    private updateAttackState;
    private performAttack;
    render(p: p5Instance): void;
    setState(newState: UnitState): void;
    canTransitionTo(_targetState: UnitState): boolean;
    seek(target: IVector): IVector;
    flee(target: IVector): IVector;
    arrive(target: IVector, slowingRadius?: number): IVector;
    attack(target: IUnit): boolean;
    takeDamage(damage: number, _source?: IUnit): void;
    isInAttackRange(target: IUnit): boolean;
    distanceTo(target: IVector | IUnit): number;
    angleTo(target: IVector | IUnit): number;
    copy(): IUnit;
    applyForce(force: IVector): void;
    setForce(force: IVector): void;
    setDestination(target: IVector): void;
    setFollow(): void;
    setStop(): void;
    setAttack(enemyUnit: IUnit): void;
    isMove(): boolean;
    isFollow(): boolean;
    isAttacking(): boolean;
    setAsLeader(): void;
    onStateChanged?(oldState: UnitState, newState: UnitState): void;
    onHealthChanged?(oldHealth: number, newHealth: number): void;
    onDeath?(): void;
}
//# sourceMappingURL=Unit.d.ts.map